const nodesSizes = {
  size1: { width: 210, height: 25 },
  size2: {
    width: 140,
    height: 125,
  },
  size3: { width: 99, height: 95 },
  size4: { width: 140, height: 165 },
  size5: { width: 113, height: 125 },
};

export const nodeConfigurations = {
  inputBool: { dataType: "bool", type: "inputBool", ...nodesSizes["size1"] },
  // inputUstavka: {
  //   dataType: "boolean",
  //   type: "inputUstavka",
  //   value: false,
  //   resultOffset: 0,
  // },
  inputFloat: { dataType: "float", type: "inputFloat", ...nodesSizes["size1"] },
  inputInt: { dataType: "int", type: "inputInt", ...nodesSizes["size1"] },
  xor: {
    dataType: "bool",
    type: "xor",
    handlesCount: 2,
    ...nodesSizes["size2"],
  },
  and: {
    dataType: "bool",
    type: "and",
    handlesCount: 3,
    ...nodesSizes["size2"],
  },
  or: { dataType: "bool", type: "or", handlesCount: 3, ...nodesSizes["size2"] },
  nand: {
    dataType: "bool",
    type: "nand",
    handlesCount: 3,
    ...nodesSizes["size2"],
  },
  nor: {
    dataType: "bool",
    type: "nor",
    handlesCount: 3,
    ...nodesSizes["size2"],
  },
  notOperation: {
    dataType: "bool",
    type: "notOperation",
    handlesCount: 1,
    ...nodesSizes["size3"],
  },
  sumInt: {
    dataType: "int",
    type: "sumInt",
    operationType: "sum",
    handlesCount: 2,
    ...nodesSizes["size2"],
  },
  sumFloat: {
    dataType: "float",
    type: "sumFloat",
    operationType: "sum",
    handlesCount: 2,
    ...nodesSizes["size2"],
  },
  multInt: {
    dataType: "int",
    type: "multInt",
    operationType: "mult",
    handlesCount: 2,
    ...nodesSizes["size2"],
  },
  multFloat: {
    dataType: "float",
    type: "multFloat",
    operationType: "mult",
    handlesCount: 2,
    ...nodesSizes["size2"],
  },
  subInt: {
    dataType: "int",
    type: "subInt",
    operationType: "sub",
    handlesCount: 2,
    ...nodesSizes["size2"],
  },
  subFloat: {
    dataType: "float",
    type: "subFloat",
    operationType: "sub",
    handlesCount: 2,
    ...nodesSizes["size2"],
  },
  outputNode: { type: "outputNode", dataType: "any", ...nodesSizes["size1"] },
  muxBool: {
    dataType: "bool",
    type: "muxBool",
    handlesCount: 3,
    ...nodesSizes["size4"],
  },
  muxInt: {
    dataType: "int",
    type: "muxInt",
    handlesCount: 3,
    ...nodesSizes["size4"],
  },
  equalsInt: {
    dataType: "bool",
    type: "equalsInt",
    operationType: "equals",
    handlesCount: 2,
    ...nodesSizes["size2"],
  },
  equalsFloat: {
    dataType: "float",
    type: "equalsFloat",
    operationType: "equals",
    handlesCount: 2,
    ...nodesSizes["size2"],
  },
  lessInt: {
    dataType: "bool",
    type: "lessInt",
    operationType: "less",
    handlesCount: 2,
    ...nodesSizes["size2"],
  },
  lessFloat: {
    dataType: "float",
    type: "lessFloat",
    operationType: "less",
    handlesCount: 2,
    ...nodesSizes["size2"],
  },
  moreInt: {
    dataType: "bool",
    type: "moreInt",
    operationType: "more",
    handlesCount: 2,
    ...nodesSizes["size2"],
  },
  moreFloat: {
    dataType: "float",
    type: "moreFloat",
    operationType: "more",
    handlesCount: 2,
    ...nodesSizes["size2"],
  },
  timerInt: {
    dataType: "int",
    name: "timer",
    ustavka: true,
    type: "timerInt",
    operationType: "timer",
    handlesCount: 0,
    ...nodesSizes["size5"],
  },
  сonstInt: {
    dataType: "int",
    name: "constant int",
    ustavka: true,
    type: "сonstInt",
    operationType: "none",
    handlesCount: 0,
    ...nodesSizes["size5"],
  },
  constBoolean: {
    dataType: "bool",
    name: "constant bool",
    ustavka: true,
    type: "constBoolean",
    operationType: "none",
    handlesCount: 0,
    ...nodesSizes["size5"],
  },
  dtrigger: {
    dataType: "bool",
    type: "dtrigger",
    handlesCount: 1,
    handlesCount: 2,
    ...nodesSizes["size5"],
  },
};
